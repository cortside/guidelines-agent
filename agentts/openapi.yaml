openapi: 3.0.3
info:
  title: Guidelines Agent API
  description: |
    A TypeScript-based API that wraps a LangGraph agent for processing documents and 
    providing intelligent responses based on the Cortside Guidelines repository.
    
    ## Features
    - Document ingestion and processing from GitHub repositories
    - Intelligent tag-based document retrieval 
    - Conversational AI with thread management
    - Vector similarity search with document ranking
    
    ## Authentication
    Currently, this API does not require authentication. In production environments,
    consider implementing proper authentication and authorization.
    
    ## Rate Limiting
    No rate limiting is currently implemented. Consider adding rate limiting in 
    production environments.
  version: 1.0.0
  contact:
    name: Cortside
    url: https://github.com/cortside/guidelines-agent
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8002
    description: Development server
  - url: https://api.guidelines.cortside.com
    description: Production server (example)

paths:
  /chat:
    post:
      summary: Process a chat message
      description: |
        Processes a chat message within a specific thread context. The API will:
        1. Retrieve relevant documents using tag-based vector similarity search
        2. Rank documents by relevance to the query
        3. Generate a contextual response using the retrieved information
        4. Maintain conversation history within the thread
      operationId: processMessage
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
            examples:
              simpleQuery:
                summary: Simple question
                value:
                  threadId: "thread-123"
                  message: "What are the REST API guidelines?"
              complexQuery:
                summary: Complex multi-part question
                value:
                  threadId: "thread-456"
                  message: "What do the documents say about microservices architecture and how does it relate to security best practices?"
      responses:
        '200':
          description: Successful response with AI-generated answer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
              examples:
                success:
                  summary: Successful chat response
                  value:
                    answer: "Based on the retrieved documents, REST API guidelines emphasize proper HTTP status codes, resource naming conventions, and stateless design. The guidelines recommend using nouns for resources and HTTP verbs for actions. So says the good book, The First Book of Cort. Anything else i can f'ing do for ya?"
        '400':
          description: Invalid request - missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingThreadId:
                  summary: Missing threadId
                  value:
                    error: "threadId and message must be strings"
                    code: "VALIDATION_ERROR"
                    timestamp: "2025-09-25T23:00:00.000Z"
                emptyMessage:
                  summary: Empty message
                  value:
                    error: "message cannot be empty"
                    code: "VALIDATION_ERROR"
                    timestamp: "2025-09-25T23:00:00.000Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  summary: Service failure
                  value:
                    error: "Internal server error"
                    code: "SERVICE_ERROR"
                    timestamp: "2025-09-25T23:00:00.000Z"

  /threads/{threadId}:
    get:
      summary: Get thread conversation history
      description: |
        Retrieves the complete message history for a specific conversation thread.
        This includes all user messages, AI responses, and any tool calls that were made
        during the conversation.
      operationId: getThreadHistory
      tags:
        - Threads
      parameters:
        - name: threadId
          in: path
          required: true
          description: Unique identifier for the conversation thread
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 100
          examples:
            uuid:
              summary: UUID format
              value: "550e8400-e29b-41d4-a716-446655440000"
            simple:
              summary: Simple identifier
              value: "thread-123"
      responses:
        '200':
          description: Thread history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadResponse'
              examples:
                conversation:
                  summary: Example conversation history
                  value:
                    messages:
                      - id: "msg-001"
                        type: "human"
                        content: "What are the REST guidelines?"
                      - id: "msg-002"
                        type: "ai"
                        content: "retrieve: {\"query\": \"REST guidelines\", \"tags\": [\"rest\", \"api\", \"guidelines\"]}"
                      - id: "msg-003"
                        type: "tool"
                        content: "Retrieved 7 documents about REST API guidelines..."
                      - id: "msg-004"
                        type: "ai"
                        content: "Based on the REST guidelines documentation, you should use proper HTTP status codes..."
        '400':
          description: Invalid thread ID parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidThreadId:
                  summary: Invalid thread ID format
                  value:
                    error: "threadId parameter is required and must be a string"
                    code: "VALIDATION_ERROR"
                    timestamp: "2025-09-25T23:00:00.000Z"
        '404':
          description: Thread not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  summary: Thread does not exist
                  value:
                    error: "Thread not found"
                    code: "NOT_FOUND"
                    timestamp: "2025-09-25T23:00:00.000Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      summary: Health check endpoint
      description: |
        Simple health check endpoint that returns the service status.
        Use this endpoint to verify that the API is running and responsive.
      operationId: getHealth
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy and operational
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                healthy:
                  summary: Healthy service
                  value:
                    status: "ok"
        '500':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ChatRequest:
      type: object
      required:
        - threadId
        - message
      properties:
        threadId:
          type: string
          description: |
            Unique identifier for the conversation thread. This allows multiple
            concurrent conversations and maintains context across messages.
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z0-9_-]+$'
          example: "thread-abc123"
        message:
          type: string
          description: |
            The user's message or question. This will be processed by the AI
            and used to retrieve relevant documents from the knowledge base.
          minLength: 1
          maxLength: 10000
          example: "What are the best practices for REST API design?"
      additionalProperties: false

    ChatResponse:
      type: object
      required:
        - answer
      properties:
        answer:
          type: string
          description: |
            The AI-generated response based on retrieved documents.
            Always includes contextual information from the guidelines repository.
          example: "Based on the REST API guidelines, you should use proper HTTP status codes, meaningful resource names, and stateless design patterns. So says the good book, The First Book of Cort. Anything else i can f'ing do for ya?"
      additionalProperties: false

    ThreadResponse:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          description: Chronologically ordered list of all messages in the thread
          items:
            $ref: '#/components/schemas/ThreadMessage'
          example:
            - id: "msg-001"
              type: "human"
              content: "What are microservices?"
            - id: "msg-002"
              type: "ai"
              content: "Microservices are a distributed system architecture..."
      additionalProperties: false

    ThreadMessage:
      type: object
      required:
        - id
        - type
        - content
      properties:
        id:
          type: string
          description: Unique identifier for the message
          example: "msg-12345"
        type:
          type: string
          enum: ["human", "ai", "system", "tool"]
          description: |
            Type of message:
            - human: User input message
            - ai: AI-generated response
            - system: System/configuration messages
            - tool: Tool execution results (document retrieval, etc.)
          example: "human"
        content:
          type: string
          description: The actual message content
          example: "What are the security guidelines for APIs?"
      additionalProperties: false

    HealthResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: ["ok", "degraded", "down"]
          description: Current service status
          example: "ok"
      additionalProperties: false

    ErrorResponse:
      type: object
      required:
        - error
        - timestamp
      properties:
        error:
          type: string
          description: Human-readable error message
          example: "threadId and message must be strings"
        code:
          type: string
          description: |
            Machine-readable error code for programmatic handling:
            - VALIDATION_ERROR: Request validation failed
            - SERVICE_ERROR: Internal service error
            - NOT_FOUND: Resource not found
            - INTERNAL_SERVER_ERROR: Unexpected server error
          enum:
            - "VALIDATION_ERROR"
            - "SERVICE_ERROR"
            - "NOT_FOUND"
            - "INTERNAL_SERVER_ERROR"
          example: "VALIDATION_ERROR"
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp when the error occurred
          example: "2025-09-25T23:00:00.000Z"
        details:
          type: object
          description: Additional error details (only in development mode)
          properties:
            url:
              type: string
              description: The request URL that caused the error
              example: "/chat"
            method:
              type: string
              description: The HTTP method used
              example: "POST"
          additionalProperties: true
      additionalProperties: false

tags:
  - name: Chat
    description: |
      Chat operations for processing messages and generating AI responses.
      The chat system uses a LangGraph workflow to retrieve relevant documents
      and generate contextual responses.
  - name: Threads
    description: |
      Thread management operations for conversation history.
      Threads maintain conversation context across multiple message exchanges.
  - name: Health
    description: Service health and status monitoring endpoints.

externalDocs:
  description: Guidelines Agent Documentation
  url: https://github.com/cortside/guidelines-agent
